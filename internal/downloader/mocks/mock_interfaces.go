// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go
//
// Generated by this command:
//
//	mockgen -source=interfaces.go -destination=mocks/mock_interfaces.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	models "debrid-downloader/pkg/models"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockDatabaseInterface is a mock of DatabaseInterface interface.
type MockDatabaseInterface struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseInterfaceMockRecorder
	isgomock struct{}
}

// MockDatabaseInterfaceMockRecorder is the mock recorder for MockDatabaseInterface.
type MockDatabaseInterfaceMockRecorder struct {
	mock *MockDatabaseInterface
}

// NewMockDatabaseInterface creates a new mock instance.
func NewMockDatabaseInterface(ctrl *gomock.Controller) *MockDatabaseInterface {
	mock := &MockDatabaseInterface{ctrl: ctrl}
	mock.recorder = &MockDatabaseInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabaseInterface) EXPECT() *MockDatabaseInterfaceMockRecorder {
	return m.recorder
}

// CreateExtractedFile mocks base method.
func (m *MockDatabaseInterface) CreateExtractedFile(file *models.ExtractedFile) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateExtractedFile", file)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateExtractedFile indicates an expected call of CreateExtractedFile.
func (mr *MockDatabaseInterfaceMockRecorder) CreateExtractedFile(file any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateExtractedFile", reflect.TypeOf((*MockDatabaseInterface)(nil).CreateExtractedFile), file)
}

// GetDownload mocks base method.
func (m *MockDatabaseInterface) GetDownload(id int64) (*models.Download, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDownload", id)
	ret0, _ := ret[0].(*models.Download)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDownload indicates an expected call of GetDownload.
func (mr *MockDatabaseInterfaceMockRecorder) GetDownload(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDownload", reflect.TypeOf((*MockDatabaseInterface)(nil).GetDownload), id)
}

// GetDownloadGroup mocks base method.
func (m *MockDatabaseInterface) GetDownloadGroup(id string) (*models.DownloadGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDownloadGroup", id)
	ret0, _ := ret[0].(*models.DownloadGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDownloadGroup indicates an expected call of GetDownloadGroup.
func (mr *MockDatabaseInterfaceMockRecorder) GetDownloadGroup(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDownloadGroup", reflect.TypeOf((*MockDatabaseInterface)(nil).GetDownloadGroup), id)
}

// GetDownloadsByGroupID mocks base method.
func (m *MockDatabaseInterface) GetDownloadsByGroupID(groupID string) ([]*models.Download, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDownloadsByGroupID", groupID)
	ret0, _ := ret[0].([]*models.Download)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDownloadsByGroupID indicates an expected call of GetDownloadsByGroupID.
func (mr *MockDatabaseInterfaceMockRecorder) GetDownloadsByGroupID(groupID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDownloadsByGroupID", reflect.TypeOf((*MockDatabaseInterface)(nil).GetDownloadsByGroupID), groupID)
}

// UpdateDownload mocks base method.
func (m *MockDatabaseInterface) UpdateDownload(download *models.Download) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDownload", download)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDownload indicates an expected call of UpdateDownload.
func (mr *MockDatabaseInterfaceMockRecorder) UpdateDownload(download any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDownload", reflect.TypeOf((*MockDatabaseInterface)(nil).UpdateDownload), download)
}

// UpdateDownloadGroup mocks base method.
func (m *MockDatabaseInterface) UpdateDownloadGroup(group *models.DownloadGroup) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDownloadGroup", group)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDownloadGroup indicates an expected call of UpdateDownloadGroup.
func (mr *MockDatabaseInterfaceMockRecorder) UpdateDownloadGroup(group any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDownloadGroup", reflect.TypeOf((*MockDatabaseInterface)(nil).UpdateDownloadGroup), group)
}

// MockCleanupInterface is a mock of CleanupInterface interface.
type MockCleanupInterface struct {
	ctrl     *gomock.Controller
	recorder *MockCleanupInterfaceMockRecorder
	isgomock struct{}
}

// MockCleanupInterfaceMockRecorder is the mock recorder for MockCleanupInterface.
type MockCleanupInterfaceMockRecorder struct {
	mock *MockCleanupInterface
}

// NewMockCleanupInterface creates a new mock instance.
func NewMockCleanupInterface(ctrl *gomock.Controller) *MockCleanupInterface {
	mock := &MockCleanupInterface{ctrl: ctrl}
	mock.recorder = &MockCleanupInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCleanupInterface) EXPECT() *MockCleanupInterfaceMockRecorder {
	return m.recorder
}

// CleanupEmptyDirectories mocks base method.
func (m *MockCleanupInterface) CleanupEmptyDirectories(downloadID int64, directory string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanupEmptyDirectories", downloadID, directory)
	ret0, _ := ret[0].(error)
	return ret0
}

// CleanupEmptyDirectories indicates an expected call of CleanupEmptyDirectories.
func (mr *MockCleanupInterfaceMockRecorder) CleanupEmptyDirectories(downloadID, directory any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanupEmptyDirectories", reflect.TypeOf((*MockCleanupInterface)(nil).CleanupEmptyDirectories), downloadID, directory)
}

// CleanupExtractedFiles mocks base method.
func (m *MockCleanupInterface) CleanupExtractedFiles(downloadID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanupExtractedFiles", downloadID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CleanupExtractedFiles indicates an expected call of CleanupExtractedFiles.
func (mr *MockCleanupInterfaceMockRecorder) CleanupExtractedFiles(downloadID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanupExtractedFiles", reflect.TypeOf((*MockCleanupInterface)(nil).CleanupExtractedFiles), downloadID)
}

// MockExtractorInterface is a mock of ExtractorInterface interface.
type MockExtractorInterface struct {
	ctrl     *gomock.Controller
	recorder *MockExtractorInterfaceMockRecorder
	isgomock struct{}
}

// MockExtractorInterfaceMockRecorder is the mock recorder for MockExtractorInterface.
type MockExtractorInterfaceMockRecorder struct {
	mock *MockExtractorInterface
}

// NewMockExtractorInterface creates a new mock instance.
func NewMockExtractorInterface(ctrl *gomock.Controller) *MockExtractorInterface {
	mock := &MockExtractorInterface{ctrl: ctrl}
	mock.recorder = &MockExtractorInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExtractorInterface) EXPECT() *MockExtractorInterfaceMockRecorder {
	return m.recorder
}

// Extract mocks base method.
func (m *MockExtractorInterface) Extract(archivePath, destPath string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Extract", archivePath, destPath)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Extract indicates an expected call of Extract.
func (mr *MockExtractorInterfaceMockRecorder) Extract(archivePath, destPath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Extract", reflect.TypeOf((*MockExtractorInterface)(nil).Extract), archivePath, destPath)
}

// IsArchive mocks base method.
func (m *MockExtractorInterface) IsArchive(filename string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsArchive", filename)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsArchive indicates an expected call of IsArchive.
func (mr *MockExtractorInterfaceMockRecorder) IsArchive(filename any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsArchive", reflect.TypeOf((*MockExtractorInterface)(nil).IsArchive), filename)
}
