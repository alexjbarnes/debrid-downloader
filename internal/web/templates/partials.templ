package templates

import "debrid-downloader/pkg/models"
import "fmt"
import "time"

// CurrentDownloads displays the current downloads section
templ CurrentDownloads(downloads []*models.Download) {
	<div class="space-y-3" id="current-downloads-content">
		if len(downloads) == 0 {
			<div class="text-center py-8">
				<svg class="w-8 h-8 text-gray-400 dark:text-gray-600 mx-auto mb-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
					<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M9 19l3 3m0 0l3-3m-3 3V10"></path>
				</svg>
				<p class="text-sm text-gray-500 dark:text-gray-400">No active downloads</p>
			</div>
		} else {
			for _, download := range downloads {
				<div class="bg-gray-50 dark:bg-gray-700 rounded-md p-4">
					<div class="flex items-center justify-between mb-2">
						<h4 class="font-medium text-gray-900 dark:text-white truncate">{ download.Filename }</h4>
						@StatusBadge(download.Status)
					</div>
					
					if download.Status == models.StatusDownloading && download.Progress > 0 {
						<div class="space-y-1">
							<div class="flex justify-between text-xs text-gray-600 dark:text-gray-400">
								<span>{ fmt.Sprintf("%.1f%%", download.Progress) }</span>
								if download.DownloadSpeed > 0 {
									<span>{ formatSpeed(download.DownloadSpeed) }</span>
								}
							</div>
							<div class="w-full bg-gray-200 dark:bg-gray-600 rounded-full h-2">
								<div 
									class="bg-blue-600 h-2 rounded-full transition-all duration-300" 
									style={ fmt.Sprintf("width: %.1f%%", download.Progress) }
								></div>
							</div>
						</div>
					}
				</div>
			}
		}
	</div>
}

// CurrentDownloadsWithPolling wraps current downloads with polling container
templ CurrentDownloadsWithPolling(downloads []*models.Download, activeCount int) {
	@CurrentDownloads(downloads)
	@DynamicPollingTrigger("current-downloads-polling-trigger", "/downloads/current", "#current-downloads", activeCount)
}

// DownloadResult displays the result of a download submission
templ DownloadResult(success bool, message string) {
	if success {
		<div class="p-4 bg-green-50 dark:bg-green-900/30 border border-green-200 dark:border-green-800 rounded-md transition-opacity duration-500" id="success-message">
			<div class="flex">
				<svg class="w-5 h-5 text-green-400 dark:text-green-300" fill="currentColor" viewBox="0 0 20 20">
					<path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path>
				</svg>
				<div class="ml-3">
					<p class="text-sm font-medium text-green-800 dark:text-green-200">Success!</p>
					<p class="text-sm text-green-700 dark:text-green-300">{ message }</p>
				</div>
			</div>
		</div>
		<script>
			// Auto-dismiss success message after 5 seconds
			setTimeout(function() {
				const successMsg = document.getElementById('success-message');
				if (successMsg) {
					successMsg.style.opacity = '0';
					setTimeout(function() {
						successMsg.remove();
					}, 500); // Wait for fade out transition
				}
			}, 5000);
		</script>
	} else {
		<div class="p-4 bg-red-50 dark:bg-red-900/30 border border-red-200 dark:border-red-800 rounded-md">
			<div class="flex">
				<svg class="w-5 h-5 text-red-400 dark:text-red-300" fill="currentColor" viewBox="0 0 20 20">
					<path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"></path>
				</svg>
				<div class="ml-3">
					<p class="text-sm font-medium text-red-800 dark:text-red-200">Error</p>
					<p class="text-sm text-red-700 dark:text-red-300">{ message }</p>
				</div>
			</div>
		</div>
	}
}

// StatusBadge displays a status badge for downloads
templ StatusBadge(status models.DownloadStatus) {
	switch status {
		case models.StatusPending:
			<span class="px-3 py-1 text-xs font-medium bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-200 rounded-md">
				Pending
			</span>
		case models.StatusDownloading:
			<span class="px-3 py-1 text-xs font-medium bg-blue-100 dark:bg-blue-900/30 text-blue-800 dark:text-blue-200 rounded-md">
				Downloading
			</span>
		case models.StatusCompleted:
			<span class="px-3 py-1 text-xs font-medium bg-green-100 dark:bg-green-900/30 text-green-800 dark:text-green-200 rounded-md">
				Completed
			</span>
		case models.StatusFailed:
			<span class="px-3 py-1 text-xs font-medium bg-red-100 dark:bg-red-900/30 text-red-800 dark:text-red-200 rounded-md">
				Failed
			</span>
		case models.StatusPaused:
			<span class="px-3 py-1 text-xs font-medium bg-yellow-100 dark:bg-yellow-900/30 text-yellow-800 dark:text-yellow-200 rounded-md">
				Paused
			</span>
	}
}

// Helper functions for formatting
func formatFileSize(bytes int64) string {
	const unit = 1024
	if bytes < unit {
		return fmt.Sprintf("%d B", bytes)
	}
	div, exp := int64(unit), 0
	for n := bytes / unit; n >= unit; n /= unit {
		div *= unit
		exp++
	}
	return fmt.Sprintf("%.1f %cB", float64(bytes)/float64(div), "KMGTPE"[exp])
}

func formatSpeed(bytesPerSec float64) string {
	return fmt.Sprintf("%s/s", formatFileSize(int64(bytesPerSec)))
}

func formatDateTime(t time.Time) string {
	return t.Format("02/01/2006 15:04")
}

func formatDuration(d time.Duration) string {
	if d < time.Minute {
		return fmt.Sprintf("%.0fs", d.Seconds())
	}
	if d < time.Hour {
		return fmt.Sprintf("%.0fm %.0fs", d.Minutes(), d.Seconds()-60*float64(int(d.Minutes())))
	}
	hours := int(d.Hours())
	minutes := int(d.Minutes()) % 60
	seconds := int(d.Seconds()) % 60
	return fmt.Sprintf("%dh %dm %ds", hours, minutes, seconds)
}

func calculateActiveDownloadTime(download *models.Download) time.Duration {
	if download.StartedAt == nil || download.CompletedAt == nil {
		return 0
	}
	totalDuration := download.CompletedAt.Sub(*download.StartedAt)
	// Subtract the total paused time from the total duration
	activeDuration := totalDuration - time.Duration(download.TotalPausedTime)*time.Second
	if activeDuration < 0 {
		return 0
	}
	return activeDuration
}

// SubmitButton creates a submit button with different states
templ SubmitButton(state string) {
	<button 
		id="submit-button"
		type="submit"
		if state == "success" {
			class="bg-green-600 hover:bg-green-700 text-white font-medium text-base py-2.5 px-8 rounded-lg transition-all duration-300 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800 relative min-w-[160px]"
		} else {
			class="bg-blue-600 hover:bg-blue-700 text-white font-medium text-base py-2.5 px-8 rounded-lg transition-all duration-300 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800 relative min-w-[160px]"
		}
		hx-swap-oob="outerHTML"
	>
		if state == "success" {
			<span class="success-content flex items-center justify-center opacity-100 transition-opacity duration-200">
				<svg class="w-4 h-4 mr-2" fill="currentColor" viewBox="0 0 20 20">
					<path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path>
				</svg>
				Success!
			</span>
			<span class="normal-content absolute inset-0 flex items-center justify-center opacity-0 transition-opacity duration-200">
				<span class="htmx-indicator absolute inset-0 flex items-center justify-center bg-blue-600 rounded-lg opacity-0">
					<svg class="animate-spin h-4 w-4 text-white mr-2" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
						<circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
						<path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
					</svg>
					Processing...
				</span>
				<span class="htmx-indicator-none opacity-100">Add Download</span>
			</span>
			<script>
				// Reset button to normal state after 2.5 seconds
				setTimeout(function() {
					const btn = document.getElementById('submit-button');
					if (btn) {
						// Smoothly transition background color
						btn.className = 'bg-green-600 hover:bg-green-700 text-white font-medium text-base py-2.5 px-8 rounded-lg transition-all duration-500 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800 relative min-w-[160px]';
						
						// Start color transition
						setTimeout(function() {
							btn.className = 'bg-blue-600 hover:bg-blue-700 text-white font-medium text-base py-2.5 px-8 rounded-lg transition-all duration-500 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800 relative min-w-[160px]';
						}, 50);
						
						// Fade out success content and fade in normal content
						const successContent = btn.querySelector('.success-content');
						const normalContent = btn.querySelector('.normal-content');
						
						if (successContent && normalContent) {
							successContent.style.opacity = '0';
							normalContent.style.opacity = '1';
						}
					}
				}, 2500);
			</script>
		} else {
			<span class="htmx-indicator absolute inset-0 flex items-center justify-center bg-blue-600 rounded-lg">
				<svg class="animate-spin h-4 w-4 text-white mr-2" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
					<circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
					<path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
				</svg>
				Processing...
			</span>
			<span class="htmx-indicator-none">Add Download</span>
		}
	</button>
}

// DynamicPollingTrigger creates a reusable polling trigger component
templ DynamicPollingTrigger(triggerID, endpoint, target string, activeCount int) {
	if activeCount > 0 {
		// Active downloads - enable fast polling
		if endpoint == "/downloads/search" {
			// History page needs special handling for search form
			<div id={ triggerID }
				hx-post={ endpoint }
				hx-trigger="every 500ms"
				hx-target={ target }
				hx-include="#search-form"
				hx-swap="innerHTML"
				hx-swap-oob="outerHTML"
				style="display: none;">
			</div>
		} else {
			// Home page current downloads
			<div id={ triggerID }
				hx-get={ endpoint }
				hx-trigger="every 500ms"
				hx-target={ target }
				hx-swap="innerHTML"
				hx-swap-oob="outerHTML"
				style="display: none;">
			</div>
		}
	} else {
		// No active downloads - disable polling completely
		<div id={ triggerID }
			hx-swap-oob="outerHTML"
			style="display: none;">
		</div>
	}
}