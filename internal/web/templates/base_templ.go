// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.906
package templates

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

func Base(title string, content templ.Component) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<!doctype html><html lang=\"en\" class=\"\"><head><meta charset=\"UTF-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><title>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var2 string
		templ_7745c5c3_Var2, templ_7745c5c3_Err = templ.JoinStringErrs(title)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/web/templates/base.templ`, Line: 9, Col: 17}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var2))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, " - Debrid Downloader</title><script src=\"https://unpkg.com/htmx.org@2.0.4\" integrity=\"sha384-HGfztofotfshcF7+8n44JQL2oJmowVChPTg48S+jvZoztPfvwD79OC/LTtG6dMp+\" crossorigin=\"anonymous\"></script><script src=\"https://cdn.tailwindcss.com\"></script><script>\n\t\t\t\t// Configure Tailwind for class-based dark mode\n\t\t\t\ttailwind.config = {\n\t\t\t\t\tdarkMode: 'class'\n\t\t\t\t}\n\t\t\t</script><script>\n\t\t\t\t// Theme detection and application - must run before page renders\n\t\t\t\t(function() {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst savedTheme = localStorage.getItem('theme');\n\t\t\t\t\t\tconst userSetTheme = localStorage.getItem('userSetTheme'); // Track if user explicitly chose\n\t\t\t\t\t\tconst prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;\n\t\t\t\t\t\t\n\t\t\t\t\t\t// If user hasn't explicitly set a theme, always follow device preference\n\t\t\t\t\t\tconst theme = (savedTheme && userSetTheme) ? savedTheme : (prefersDark ? 'dark' : 'light');\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (theme === 'dark') {\n\t\t\t\t\t\t\tdocument.documentElement.classList.add('dark');\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tdocument.documentElement.classList.remove('dark');\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Only save if we're using a saved theme, otherwise let it follow device\n\t\t\t\t\t\tif (savedTheme && userSetTheme) {\n\t\t\t\t\t\t\tlocalStorage.setItem('theme', theme);\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tconsole.warn('Theme initialization failed:', e);\n\t\t\t\t\t}\n\t\t\t\t})();\n\t\t\t</script><style>\n\t\t\t\t/* Custom scrollbar */\n\t\t\t\t::-webkit-scrollbar {\n\t\t\t\t\twidth: 6px;\n\t\t\t\t}\n\t\t\t\t::-webkit-scrollbar-track {\n\t\t\t\t\t@apply bg-gray-100 dark:bg-gray-800;\n\t\t\t\t}\n\t\t\t\t::-webkit-scrollbar-thumb {\n\t\t\t\t\t@apply bg-gray-300 dark:bg-gray-600 rounded-full;\n\t\t\t\t}\n\t\t\t\t::-webkit-scrollbar-thumb:hover {\n\t\t\t\t\t@apply bg-gray-400 dark:bg-gray-500;\n\t\t\t\t}\n\t\t\t</style></head><body class=\"bg-gray-50 dark:bg-gray-900 text-gray-900 dark:text-gray-100 min-h-screen flex flex-col transition-colors duration-200\"><!-- Header --><header class=\"bg-white dark:bg-gray-800 shadow-sm border-b border-gray-200 dark:border-gray-700\"><div class=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8\"><div class=\"flex justify-between items-center h-16\"><div class=\"flex items-center\"><h1 class=\"text-xl font-semibold text-gray-900 dark:text-white\"><a href=\"/\" class=\"hover:text-blue-600 dark:hover:text-blue-400 transition-colors\">Debrid Downloader</a></h1></div><!-- Hamburger Menu --><div class=\"relative\"><button onclick=\"toggleMenu()\" class=\"p-2 rounded-lg bg-gray-100 dark:bg-gray-700 hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors\" aria-label=\"Open menu\" id=\"menu-button\"><svg class=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M4 6h16M4 12h16M4 18h16\"></path></svg></button><!-- Dropdown Menu --><div id=\"dropdown-menu\" class=\"hidden absolute right-0 mt-2 w-48 bg-white dark:bg-gray-800 rounded-lg shadow-lg border border-gray-200 dark:border-gray-700 z-50\"><div class=\"py-1\"><a href=\"/\" class=\"block px-4 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors\"><svg class=\"w-4 h-4 inline mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\"></path></svg> Download</a> <a href=\"/history\" class=\"block px-4 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors\"><svg class=\"w-4 h-4 inline mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z\"></path></svg> History</a><div class=\"border-t border-gray-200 dark:border-gray-600 my-1\"></div><a href=\"/settings\" class=\"block px-4 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors\"><svg class=\"w-4 h-4 inline mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z\"></path> <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M15 12a3 3 0 11-6 0 3 3 0 016 0z\"></path></svg> Settings</a></div></div></div></div></div></header><!-- Main Content --><main class=\"flex-1 max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-8 w-full\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = content.Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, "</main><script>\n\t\t\t\t// Global theme setting function\n\t\t\t\twindow.setTheme = function(theme) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst html = document.documentElement;\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (theme === 'dark') {\n\t\t\t\t\t\t\thtml.classList.add('dark');\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\thtml.classList.remove('dark');\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Mark that user has explicitly set a theme\n\t\t\t\t\t\tlocalStorage.setItem('theme', theme);\n\t\t\t\t\t\tlocalStorage.setItem('userSetTheme', 'true');\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Trigger custom event for settings page\n\t\t\t\t\t\twindow.dispatchEvent(new CustomEvent('themeChanged', { detail: { theme } }));\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tconsole.warn('Failed to save theme preference');\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\tfunction toggleMenu() {\n\t\t\t\t\tconst menu = document.getElementById('dropdown-menu');\n\t\t\t\t\tmenu.classList.toggle('hidden');\n\t\t\t\t\t\n\t\t\t\t\t// Close menu when clicking outside\n\t\t\t\t\tdocument.addEventListener('click', closeMenuOnOutsideClick);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tfunction closeMenuOnOutsideClick(event) {\n\t\t\t\t\tconst menu = document.getElementById('dropdown-menu');\n\t\t\t\t\tconst button = document.getElementById('menu-button');\n\t\t\t\t\tif (!menu.contains(event.target) && !button.contains(event.target)) {\n\t\t\t\t\t\tmenu.classList.add('hidden');\n\t\t\t\t\t\tdocument.removeEventListener('click', closeMenuOnOutsideClick);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Directory picker functionality\n\t\t\t\tlet currentPath = '/';\n\t\t\t\tlet basePath = ''; // Will be set from server's base path\n\t\t\t\t\n\t\t\t\t// Make functions globally accessible\n\t\t\t\twindow.toggleDirectoryPicker = function() {\n\t\t\t\t\tconst overlay = document.getElementById('directory-picker-overlay');\n\t\t\t\t\tif (overlay && overlay.classList.contains('hidden')) {\n\t\t\t\t\t\tshowDirectoryPicker();\n\t\t\t\t\t} else {\n\t\t\t\t\t\thideDirectoryPicker();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\twindow.showDirectoryPicker = function() {\n\t\t\t\t\tconst overlay = document.getElementById('directory-picker-overlay');\n\t\t\t\t\tif (!overlay) {\n\t\t\t\t\t\tconsole.error('Directory picker overlay not found');\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\toverlay.classList.remove('hidden');\n\t\t\t\t\t// Always start from root when opening\n\t\t\t\t\tcurrentPath = '/';\n\t\t\t\t\tloadDirectories(currentPath);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\twindow.hideDirectoryPicker = function() {\n\t\t\t\t\tconst overlay = document.getElementById('directory-picker-overlay');\n\t\t\t\t\tif (overlay) {\n\t\t\t\t\t\toverlay.classList.add('hidden');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Add event listener to close modal when clicking overlay\n\t\t\t\tdocument.addEventListener('DOMContentLoaded', function() {\n\t\t\t\t\tconst overlay = document.getElementById('directory-picker-overlay');\n\t\t\t\t\tif (overlay) {\n\t\t\t\t\t\toverlay.addEventListener('click', function(e) {\n\t\t\t\t\t\t\tif (e.target === overlay) {\n\t\t\t\t\t\t\t\thideDirectoryPicker();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\tasync function loadDirectories(path) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst response = await fetch(`/api/folders?path=${encodeURIComponent(path)}`);\n\t\t\t\t\t\tconst data = await response.json();\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (!response.ok) {\n\t\t\t\t\t\t\tthrow new Error(data.error || 'Failed to load directories');\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tcurrentPath = data.current_path;\n\t\t\t\t\t\tbasePath = data.base_path;\n\t\t\t\t\t\trenderBreadcrumbs(data.breadcrumbs);\n\t\t\t\t\t\trenderDirectories(data.directories);\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tconsole.error('Error loading directories:', error);\n\t\t\t\t\t\talert('Failed to load directories: ' + error.message);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tfunction renderBreadcrumbs(breadcrumbs) {\n\t\t\t\t\tconst container = document.querySelector('#breadcrumb-nav .flex');\n\t\t\t\t\tcontainer.innerHTML = '';\n\t\t\t\t\t\n\t\t\t\t\tbreadcrumbs.forEach((crumb, index) => {\n\t\t\t\t\t\tif (index > 0) {\n\t\t\t\t\t\t\tconst separator = document.createElement('span');\n\t\t\t\t\t\t\tseparator.className = 'text-gray-400';\n\t\t\t\t\t\t\tseparator.textContent = '/';\n\t\t\t\t\t\t\tcontainer.appendChild(separator);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tconst link = document.createElement('button');\n\t\t\t\t\t\tlink.type = 'button';\n\t\t\t\t\t\tlink.className = 'text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300';\n\t\t\t\t\t\tlink.textContent = crumb.name;\n\t\t\t\t\t\tlink.onclick = () => loadDirectories(crumb.path);\n\t\t\t\t\t\tcontainer.appendChild(link);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tfunction renderDirectories(directories) {\n\t\t\t\t\tconst container = document.getElementById('directory-list');\n\t\t\t\t\tcontainer.innerHTML = '';\n\t\t\t\t\t\n\t\t\t\t\tif (directories.length === 0) {\n\t\t\t\t\t\tconst emptyMsg = document.createElement('div');\n\t\t\t\t\t\temptyMsg.className = 'px-4 py-8 text-center text-sm text-gray-500 dark:text-gray-400';\n\t\t\t\t\t\temptyMsg.textContent = 'No subdirectories found';\n\t\t\t\t\t\tcontainer.appendChild(emptyMsg);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tdirectories.forEach(dir => {\n\t\t\t\t\t\tconst item = document.createElement('div');\n\t\t\t\t\t\titem.className = 'flex items-center px-4 py-2 hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors border-b border-gray-100 dark:border-gray-700';\n\t\t\t\t\t\t\n\t\t\t\t\t\tconst dirButton = document.createElement('button');\n\t\t\t\t\t\tdirButton.type = 'button';\n\t\t\t\t\t\tdirButton.className = 'flex-1 flex items-center text-left';\n\t\t\t\t\t\tdirButton.onclick = () => loadDirectories(dir.path);\n\t\t\t\t\t\t\n\t\t\t\t\t\tconst icon = document.createElement('svg');\n\t\t\t\t\t\ticon.className = 'w-5 h-5 mr-3 flex-shrink-0';\n\t\t\t\t\t\ticon.setAttribute('viewBox', '0 0 24 24');\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (dir.name === '..') {\n\t\t\t\t\t\t\t// Parent directory icon\n\t\t\t\t\t\t\ticon.classList.add('text-gray-400');\n\t\t\t\t\t\t\ticon.innerHTML = '<path fill=\"currentColor\" d=\"M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z\"/>';\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// Regular folder icon\n\t\t\t\t\t\t\ticon.classList.add('text-blue-500');\n\t\t\t\t\t\t\ticon.innerHTML = '<path fill=\"currentColor\" d=\"M10 4H4c-1.11 0-2 .89-2 2v12c0 1.11.89 2 2 2h16c1.11 0 2-.89 2-2V8c0-1.11-.89-2-2-2h-8l-2-2z\"/>';\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tconst text = document.createElement('span');\n\t\t\t\t\t\ttext.className = 'flex-1 text-gray-900 dark:text-white';\n\t\t\t\t\t\ttext.textContent = dir.name === '..' ? 'Parent Directory' : dir.name;\n\t\t\t\t\t\t\n\t\t\t\t\t\tdirButton.appendChild(icon);\n\t\t\t\t\t\tdirButton.appendChild(text);\n\t\t\t\t\t\titem.appendChild(dirButton);\n\t\t\t\t\t\t\n\t\t\t\t\t\t// No individual select buttons - users navigate into folders and select from there\n\t\t\t\t\t\t\n\t\t\t\t\t\tcontainer.appendChild(item);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\twindow.selectDirectory = function(path) {\n\t\t\t\t\t// Build the full absolute path\n\t\t\t\t\tlet fullPath = basePath;\n\t\t\t\t\tif (path !== '/' && path !== '') {\n\t\t\t\t\t\t// Remove leading slash from path if present\n\t\t\t\t\t\tconst cleanPath = path.startsWith('/') ? path.substring(1) : path;\n\t\t\t\t\t\tfullPath = basePath + '/' + cleanPath;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tdocument.getElementById('directory').value = fullPath;\n\t\t\t\t\tdocument.getElementById('selected-directory').textContent = fullPath;\n\t\t\t\t\thideDirectoryPicker();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\twindow.createNewFolder = async function() {\n\t\t\t\t\tconst nameInput = document.getElementById('new-folder-name');\n\t\t\t\t\tconst name = nameInput.value.trim();\n\t\t\t\t\t\n\t\t\t\t\tif (!name) {\n\t\t\t\t\t\talert('Please enter a folder name');\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst response = await fetch('/api/folders', {\n\t\t\t\t\t\t\tmethod: 'POST',\n\t\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tbody: JSON.stringify({\n\t\t\t\t\t\t\t\tpath: currentPath,\n\t\t\t\t\t\t\t\tname: name\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t});\n\t\t\t\t\t\t\n\t\t\t\t\t\tconst data = await response.json();\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (!response.ok) {\n\t\t\t\t\t\t\tthrow new Error(data.error || 'Failed to create folder');\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tnameInput.value = '';\n\t\t\t\t\t\tcancelNewFolder(); // Hide the input\n\t\t\t\t\t\tloadDirectories(currentPath); // Refresh the current directory\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tconsole.error('Error creating folder:', error);\n\t\t\t\t\t\talert('Failed to create folder: ' + error.message);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\twindow.selectCurrentDirectory = function() {\n\t\t\t\t\t// Build the full absolute path for current directory\n\t\t\t\t\tlet fullPath = basePath;\n\t\t\t\t\tif (currentPath !== '/' && currentPath !== '') {\n\t\t\t\t\t\tconst cleanPath = currentPath.startsWith('/') ? currentPath.substring(1) : currentPath;\n\t\t\t\t\t\tfullPath = basePath + '/' + cleanPath;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tdocument.getElementById('directory').value = fullPath;\n\t\t\t\t\tdocument.getElementById('selected-directory').textContent = fullPath;\n\t\t\t\t\thideDirectoryPicker();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\twindow.showNewFolderInput = function() {\n\t\t\t\t\tdocument.getElementById('new-folder-input').classList.remove('hidden');\n\t\t\t\t\tdocument.getElementById('new-folder-name').focus();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\twindow.cancelNewFolder = function() {\n\t\t\t\t\tdocument.getElementById('new-folder-input').classList.add('hidden');\n\t\t\t\t\tdocument.getElementById('new-folder-name').value = '';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Update directory display when URL changes\n\t\t\t\twindow.updateDirectoryDisplay = function(suggestedPath) {\n\t\t\t\t\tif (suggestedPath && suggestedPath.trim() !== '') {\n\t\t\t\t\t\tdocument.getElementById('directory').value = suggestedPath.trim();\n\t\t\t\t\t\tdocument.getElementById('selected-directory').textContent = suggestedPath.trim();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t</script></body></html>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
