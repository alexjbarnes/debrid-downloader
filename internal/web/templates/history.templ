package templates

import "debrid-downloader/pkg/models"
import "fmt"

templ History(downloads []*models.Download) {
	<div class="space-y-6">
		<div class="flex flex-col sm:flex-row sm:justify-between sm:items-center gap-4">
			<h2 class="text-2xl font-semibold text-gray-900 dark:text-white">Download History</h2>
			
			<!-- Search and Filter -->
			<div class="flex flex-col sm:flex-row gap-4">
				<form id="search-form" class="flex flex-col sm:flex-row gap-4">
					<input 
						type="text" 
						placeholder="Search downloads..."
						class="px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400 transition-colors"
						hx-post="/downloads/search"
						hx-target="#downloads-list"
						hx-trigger="keyup changed delay:300ms, change from:#status-filter"
						hx-include="#search-form"
						name="search"
						id="search-input"
					/>
					
					<div class="relative flex flex-col">
						<div class="flex justify-end mb-1">
							<span 
								class="text-xs text-blue-500 dark:text-blue-400 hover:text-blue-700 dark:hover:text-blue-300 cursor-pointer"
								onclick="selectAllStatuses()"
							>
								Select All
							</span>
						</div>
						<select 
							class="px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white transition-colors w-full"
							hx-post="/downloads/search"
							hx-target="#downloads-list"
							hx-trigger="change"
							hx-include="#search-form"
							name="status"
							id="status-filter"
							multiple
							size="6"
							style="min-width: 200px;"
						>
							<option value="pending">Pending</option>
							<option value="downloading">Downloading</option>
							<option value="completed">Completed</option>
							<option value="failed">Failed</option>
							<option value="paused">Paused</option>
						</select>
					</div>
					
					<input type="hidden" name="sort" id="sort-order" value="desc" />
				</form>
				
				<!-- Sort Toggle Button -->
				<button
					type="button"
					class="px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-700 focus:ring-2 focus:ring-blue-500 focus:outline-none bg-white dark:bg-gray-700 text-gray-900 dark:text-white transition-all flex items-center gap-2"
					onclick="toggleSort()"
				>
					<span id="sort-icon">↓</span>
					<span id="sort-text">Newest First</span>
				</button>
			</div>
		</div>
		
		<script>
			// Load saved selections on page load
			document.addEventListener('DOMContentLoaded', function() {
				loadSavedSelections();
			});
			
			function toggleSort() {
				const sortInput = document.getElementById('sort-order');
				const sortIcon = document.getElementById('sort-icon');
				const sortText = document.getElementById('sort-text');
				
				if (sortInput.value === 'desc') {
					sortInput.value = 'asc';
					sortIcon.textContent = '↑';
					sortText.textContent = 'Oldest First';
				} else {
					sortInput.value = 'desc';
					sortIcon.textContent = '↓';
					sortText.textContent = 'Newest First';
				}
				
				// Save sort order
				localStorage.setItem('debrid-sort-order', sortInput.value);
				
				// Trigger the search with new sort order
				htmx.trigger('#search-form', 'submit');
			}
			
			function selectAllStatuses() {
				const statusFilter = document.getElementById('status-filter');
				const options = statusFilter.options;
				for (let i = 0; i < options.length; i++) {
					options[i].selected = true;
				}
				// Save selections
				saveStatusSelections();
				// Trigger the search with all statuses selected
				htmx.trigger('#status-filter', 'change');
			}
			
			function saveStatusSelections() {
				const statusFilter = document.getElementById('status-filter');
				const selectedValues = Array.from(statusFilter.selectedOptions).map(option => option.value);
				localStorage.setItem('debrid-selected-statuses', JSON.stringify(selectedValues));
			}
			
			function loadSavedSelections() {
				// Load saved statuses
				const savedStatuses = localStorage.getItem('debrid-selected-statuses');
				if (savedStatuses) {
					try {
						const selectedValues = JSON.parse(savedStatuses);
						const statusFilter = document.getElementById('status-filter');
						
						// Clear all selections first
						for (let i = 0; i < statusFilter.options.length; i++) {
							statusFilter.options[i].selected = false;
						}
						
						// Set saved selections
						selectedValues.forEach(value => {
							const option = statusFilter.querySelector(`option[value="${value}"]`);
							if (option) {
								option.selected = true;
							}
						});
						
						// Trigger search with loaded selections
						if (selectedValues.length > 0) {
							htmx.trigger('#status-filter', 'change');
						}
					} catch (e) {
						console.warn('Failed to load saved status selections:', e);
					}
				}
				
				// Load saved sort order
				const savedSort = localStorage.getItem('debrid-sort-order');
				if (savedSort) {
					const sortInput = document.getElementById('sort-order');
					const sortIcon = document.getElementById('sort-icon');
					const sortText = document.getElementById('sort-text');
					
					sortInput.value = savedSort;
					if (savedSort === 'asc') {
						sortIcon.textContent = '↑';
						sortText.textContent = 'Oldest First';
					} else {
						sortIcon.textContent = '↓';
						sortText.textContent = 'Newest First';
					}
				}
			}
			
			// Save selections when status filter changes
			document.getElementById('status-filter').addEventListener('change', function() {
				saveStatusSelections();
			});
		</script>

		<!-- Downloads List -->
		<div id="downloads-list" class="space-y-4" 
			hx-post="/downloads/search" 
			hx-trigger="load"
			hx-include="#search-form">
			@DownloadsList(downloads)
		</div>
		
		<!-- Hidden polling trigger that gets updated via out-of-band swaps -->
		<div id="polling-trigger" style="display: none;"></div>
		
	</div>
}

templ DownloadsList(downloads []*models.Download) {
	if len(downloads) == 0 {
		<div class="text-center py-12">
			<svg class="w-12 h-12 text-gray-400 dark:text-gray-600 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
				<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M9 19l3 3m0 0l3-3m-3 3V10"></path>
			</svg>
			<p class="text-gray-500 dark:text-gray-400">No downloads found</p>
		</div>
	} else {
		for _, download := range downloads {
			@DownloadItem(download)
		}
	}
}

// DownloadsListWithPolling wraps downloads list with polling container
templ DownloadsListWithPolling(downloads []*models.Download, activeCount int) {
	@DownloadsList(downloads)
	@DynamicPollingTrigger("polling-trigger", "/downloads/search", "#downloads-list", activeCount)
}

templ DownloadItem(download *models.Download) {
	<div class={ "download-item bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-6 relative", templ.KV("pb-16", download.Status == models.StatusDownloading || download.Status == models.StatusPending || download.Status == models.StatusPaused || (download.Status == models.StatusFailed && download.RetryCount < 5)) }>
		<!-- Header with status badge and group info -->
		<div class="flex items-center justify-between mb-3">
			<div class="flex items-center space-x-2">
				@StatusBadge(download.Status)
				if download.GroupID != "" {
					<span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-purple-100 dark:bg-purple-900/30 text-purple-800 dark:text-purple-200">
						Group: { download.GroupID[:8] }...
					</span>
				}
			</div>
		</div>
		
		<!-- Filename below buttons -->
		<div class="mb-3">
			<h3 class="text-lg font-medium text-gray-900 dark:text-white break-words overflow-wrap-anywhere">
				{ download.Filename }
			</h3>
		</div>
		
		<!-- URL with better wrapping -->
		<div class="mb-3">
			<p class="text-sm text-gray-600 dark:text-gray-400 break-all">
				{ download.OriginalURL }
			</p>
		</div>
		
		<!-- Download info grid -->
		<div class={ "grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-x-6 gap-y-2 text-sm text-gray-500 dark:text-gray-400", templ.KV("mb-3", download.Status == models.StatusDownloading), templ.KV("mb-1", download.Status != models.StatusDownloading) }>
			<div>
				<span class="font-medium text-gray-700 dark:text-gray-300">Directory:</span>
				<div class="break-words">{ download.Directory }</div>
			</div>
			
			if download.CompletedAt != nil {
				<div>
					<span class="font-medium text-gray-700 dark:text-gray-300">Date:</span> { download.CompletedAt.Format("02/01/2006 15:04") }
				</div>
			} else {
				<div>
					<span class="font-medium text-gray-700 dark:text-gray-300">Date:</span> { download.CreatedAt.Format("02/01/2006 15:04") }
				</div>
			}
			
			if download.FileSize > 0 {
				<div>
					<span class="font-medium text-gray-700 dark:text-gray-300">Size:</span> { formatFileSize(download.FileSize) }
				</div>
			}
			
			if download.StartedAt != nil && download.CompletedAt != nil {
				<div>
					<span class="font-medium text-gray-700 dark:text-gray-300">Download Time:</span> { formatDuration(calculateActiveDownloadTime(download)) }
				</div>
			}
			
			if download.Status == models.StatusCompleted && download.DownloadSpeed > 0 {
				<div>
					<span class="font-medium text-gray-700 dark:text-gray-300">Avg Speed:</span> { formatSpeed(download.DownloadSpeed) }
				</div>
			}
		</div>
		
		<!-- Delete button for completed downloads -->
		if download.Status == models.StatusCompleted {
			<div class="flex justify-end mt-2">
				<button 
					class="px-5 py-2 text-sm bg-red-100 dark:bg-red-900/30 text-red-800 dark:text-red-200 rounded-md hover:bg-red-200 dark:hover:bg-red-900/50 transition-colors"
					hx-delete={ fmt.Sprintf("/downloads/%d", download.ID) }
					hx-target="closest .download-item"
					hx-swap="outerHTML"
					hx-confirm="Are you sure you want to delete this download from history?"
				>
					Delete
				</button>
			</div>
		}

		<!-- Progress Bar for downloading files -->
		if download.Status == models.StatusDownloading {
			<div class="mb-4">
				<div class="flex justify-between text-sm text-gray-600 dark:text-gray-400 mb-1">
					<span>{ fmt.Sprintf("%.1f%%", download.Progress) }</span>
					if download.DownloadSpeed > 0 {
						<span>{ formatSpeed(download.DownloadSpeed) }</span>
					}
				</div>
				<div class="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2">
					<div 
						class="bg-blue-600 h-2 rounded-full transition-all duration-300" 
						style={ fmt.Sprintf("width: %.1f%%", download.Progress) }
					></div>
				</div>
			</div>
		}

		<!-- Error Message -->
		if download.Status == models.StatusFailed && download.ErrorMessage != "" {
			<div class="mb-6 p-3 bg-red-50 dark:bg-red-900/30 border border-red-200 dark:border-red-800 rounded-md">
				<p class="text-sm text-red-800 dark:text-red-200">{ download.ErrorMessage }</p>
				if download.RetryCount < 5 {
					<button 
						class="mt-2 text-sm text-red-600 dark:text-red-400 hover:text-red-800 dark:hover:text-red-200 font-medium"
						hx-post={ fmt.Sprintf("/downloads/%d/retry", download.ID) }
						hx-target="closest .download-item"
						hx-swap="outerHTML"
					>
						Retry Download
					</button>
				}
			</div>
		}
		
		<!-- Action buttons at bottom for active downloads only -->
		if download.Status == models.StatusDownloading || download.Status == models.StatusPending || download.Status == models.StatusPaused || (download.Status == models.StatusFailed && download.RetryCount < 5) {
			<div class="absolute bottom-4 left-4 right-4 flex justify-between">
				<!-- Pause/Resume/Retry button on left -->
				<div>
					if download.Status == models.StatusDownloading {
						<button 
							class="px-4 py-2 text-sm bg-yellow-100 dark:bg-yellow-900/30 text-yellow-800 dark:text-yellow-200 rounded-md hover:bg-yellow-200 dark:hover:bg-yellow-900/50 transition-colors"
							hx-post={ fmt.Sprintf("/downloads/%d/pause", download.ID) }
							hx-target="closest .download-item"
							hx-swap="outerHTML"
						>
							Pause
						</button>
					}
					
					if download.Status == models.StatusPaused {
						<button 
							class="px-4 py-2 text-sm bg-green-100 dark:bg-green-900/30 text-green-800 dark:text-green-200 rounded-md hover:bg-green-200 dark:hover:bg-green-900/50 transition-colors"
							hx-post={ fmt.Sprintf("/downloads/%d/resume", download.ID) }
							hx-target="closest .download-item"
							hx-swap="outerHTML"
						>
							Resume
						</button>
					}
					
					if download.Status == models.StatusFailed && download.RetryCount < 5 {
						<button 
							class="px-4 py-2 text-sm bg-blue-100 dark:bg-blue-900/30 text-blue-800 dark:text-blue-200 rounded-md hover:bg-blue-200 dark:hover:bg-blue-900/50 transition-colors"
							hx-post={ fmt.Sprintf("/downloads/%d/retry", download.ID) }
							hx-target="closest .download-item"
							hx-swap="outerHTML"
						>
							Retry
						</button>
					}
				</div>
				
				<!-- Cancel button on right for downloading/pending only -->
				if download.Status == models.StatusDownloading || download.Status == models.StatusPending {
					<div>
						<button 
							class="px-4 py-2 text-sm bg-orange-100 dark:bg-orange-900/30 text-orange-800 dark:text-orange-200 rounded-md hover:bg-orange-200 dark:hover:bg-orange-900/50 transition-colors"
							hx-delete={ fmt.Sprintf("/downloads/%d", download.ID) }
							hx-target="closest .download-item"
							hx-swap="outerHTML"
							hx-confirm="Are you sure you want to cancel this download?"
						>
							Cancel
						</button>
					</div>
				}
			</div>
		}
		
	</div>
}

